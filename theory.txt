// So webpack is the most commonly used asset bundler.So it doesn't actually not only bundleJavaScript files or modules, but bundles all kinds of assetslike JavaScript, CSS, and images.Okay?So we see here on this (webpack.js.org) left side all of these dependencies,all of these files, like depending on each other. And webpack then bundles these together into just one JavaScript, one CSS file, and then these images here. Okay? Now in our case we're not interested in CSS or the images. We just want to bundle all of our JavaScipt files into one big bundle, okay. So I'm gonna use webpack four here, which by the time of recording is the most current version available, okay. And this version actually now supports something called zero configuration where you don't even need to write a configuration file. So if you want to do that you just need to have one source folder in the root and then in there one index.js file. And webpack then will automatically create a distribution folder and put the bundled file in there. But that's just for really small apps and so that's not really what we're interested in. Okay and so we will write some configuration.



////////src = ./webpack.config.js;/////////////

// in webpack there are four core concepts: it's the entry point, the output, loaders, and plugins. And we will just do a very simple config here because again our app is fairly simple. So starting with the entry point, all we need to do is to specify the entry property here in this object. And the entry point is where webpack will start the bundling. So basically, this is the file where it will start looking for all the dependencies which it should then bundle together, okay. So we're gonna start seeing how this really works once we start experimenting with this. Right? Now in here we can specify one or more entry files, but for now we just want one entry file and that is this index.js file, okay. So let's now simply specify the path to that and it is dot and what dot means here is the current folder. Okay? So just like in the command line when we have dot dot, so something like this, this means go up to the parent folder. But just one dot is the current folder. So current folder, which is the product folder, then go into the source folder, then js and here it's index.js. And that's it. That is our entry point. So that's the first property in this object here. Next up we need to define the output property, which will tell webpack exactly where to save our bundle file. So we specify the output property and now in here we actually pass an object. And then in this object we put the path. So the path to the folder and then the file name. So path and I'm going to leave it empty for now and then the file name. And as the file name we simply want bundle.js. So that's kind of a standard name for a webpack output. Now about this path here this actually needs to be an absolute path here. And in order to have access to that absolute path, we need to use a built in node package. So let's include that node package here. And it works like this... Require path, okay? So again don't worry about the syntax here. This is just to include a built in node module, again called path, and then put it in the path variable. Now in here, what we want to do then is to use a method which is in the path package, so path.resolve. And then we use the dirname variable that node gives us access to. So this variable here, this is the current absolute path. And so we use path revolve to now join this current path so that the working directory, the Forkify directory, with the one that we want our bundle to be in, which is dist. Right? And then in there js. Okay, does it make sense? So again, this path resolve, which is a method which is available to us through this path package that we included up here on this line, we will then join the current absolute path with the one that we want our bundle to be in. So dist/js. So basically this folder here. And so now webpack will output our file to this directory with this bundle.js file name. And that is now actually all that we need in order to get started. Now we can just make this a little bit better because in webpack four we now have something called the production and the development mode. So the development mode simply builds our bundler without minifying our code in order to be as fast as possible. But the production mode will automatically enable all kinds of optimization, like minification and tree shaking in order to reduce the final bundle size.

// run is the keyword if you want to start one of our npm scripts and this one is called dev.

//////////////package.json/L:7//////////////
// // as soon as we start the npm script called dev it will then open up webpack, look up our configuration here, and then do the work that we specified here. So it will read our entry file, do it's work, and output it exactly here, as we specified. And why do we have to use an npm script for this? Well because that's just the only way or at least the best way to launch our locally installed dev dependency, just like webpack is. Okay? Now actually in order for this to work we need to do one more thing, which is to install the webpack command line interface.